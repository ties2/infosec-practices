
# Kubernetes: Exposed Dashboard Exploit

**Objective**: Secure an exposed Kubernetes dashboard by restricting access, enabling RBAC, and applying network policies.

**Difficulty**: 7/9  
**Time**: 45 minutes

## Steps

1. **Check Access**  
   - Inspect the Kubernetes dashboard service to identify exposed ports:  
     ```bash
     kubectl get svc -n kubernetes-dashboard
     ```

2. **Simulate**  
   - Test external access to the dashboard:  
     ```bash
     curl http://<node-ip>:<port>
     ```
     - Confirm the dashboard loads, indicating exposure.

3. **Secure**  
   - Modify the dashboard service to use `ClusterIP` instead of `NodePort` or `LoadBalancer`:  
     ```bash
     kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard
     ```
     - Apply a network policy to restrict access to admin IPs:  
       ```bash
       kubectl apply -f netpol.yaml
       ```
       Example `netpol.yaml`:
       ```yaml
       apiVersion: networking.k8s.io/v1
       kind: NetworkPolicy
       metadata:
         name: dashboard-access
         namespace: kubernetes-dashboard
       spec:
         podSelector:
           matchLabels:
             k8s-app: kubernetes-dashboard
         policyTypes:
         - Ingress
         ingress:
         - from:
           - ipBlock:
               cidr: <admin-ip-range> # e.g., 192.168.1.0/24
           ports:
           - protocol: TCP
             port: 8443
       ```

4. **Auth**  
   - Enable RBAC to enforce authentication and authorization:  
     ```bash
     kubectl apply -f dashboard-rbac.yaml
     ```
     Example `dashboard-rbac.yaml`:
     ```yaml
     apiVersion: rbac.authorization.k8s.io/v1
     kind: ClusterRoleBinding
     metadata:
       name: kubernetes-dashboard
     roleRef:
       apiGroup: rbac.authorization.k8s.io
       kind: ClusterRole
       name: kubernetes-dashboard
     subjects:
     - kind: ServiceAccount
       name: kubernetes-dashboard
       namespace: kubernetes-dashboard
     ```

5. **Test**  
   - Attempt to access the dashboard without a valid token to confirm access is denied.

## Solution

The Kubernetes dashboard was secured by changing the service to `ClusterIP`, applying a network policy to restrict access to admin IPs, and enabling RBAC for authentication.
